02-2 콘솔에 로그 뿌리기

console 객체는 전역 객체라고 부르며 필요할 때 코드의 어느 부분에서나 사용할 수 있다.
console.log()를 실행한 후 함께 출력되는 undefined는 호출한 log() 함수에서 반환하는 값이 없을 때 나타난다.
undefined는 단순히 값이 존재하지 않는다는 의미이고 null은 의도적으로 값을 비웠다는 의미이다. 

* 대표적인 전역 객체들
- console : 콘솔 창에 결과를 보여주는 객체
- process : 프로세스의 실행에 대한 정보를 다루는 객체
- export : 모듈을 다루는 객체

JSON 포맷은 자바스크립트의 객체 포맷으로 단말끼리 데이터를 주고받을 때 사용한다.
중괄호 {}를 이용해 그 안에 키 와 값으로 구성된 속성들을 ,로 구분한다. 
ex) {"name":"임혜지","age":21}

* console 객체의 주요 메소드
- dir(object) : 자바스크립트 객체의 속성들을 출력한다.
- time(id) : 실행 시간을 측정하기 위한 시작 시간을 기록한다.
- timeEnd(id) : 실행 시간을 측정하시 위한 끝 시간을 기록한다.

* 실행한 파일의 정보를 알려 주는 전역 변수
- __filename : 실행한 파일의 이름을 출력한다, 파일의 전체 패스가 출력된다
- __dirname : 실행한 파일이 들어 있는 폴더를 출력한다, 폴더의 전체 패스가 출력된다. 

02-3 프로세스 객체 간단하게 살펴보기

process 객체는 프로그램을 실행했을 때 만들어지는 프로세스 정보를 다루는 객체이다.

* process 객체의 주요 속성과 메소드
- argv : 프로세스를 실행할 때 전달되는 파라미터(매개변수) 정보
- env : 환경 변수 정보
- exit() : 프로세스를 끝내는 메소드

자바스크립트 파일을 실행하기 위해 사용한 node.exe 파일의 이름이 첫 번째 파라미터가 되고 자바스크립트 파일의 패스가 두 번째 파라미터가 된다.
argv 속성에 들어 있는 모든 값을 하나씩 출력하고 싶으면 forEach() 메소드를 사용한다.

process.env 속성을 이용하면 사용자 정의 환경 변수 뿐만 아니라 OS와 같은 시스템 환경 변수도 접근할 수 있다.

02-4 노드에서 모듈 사용하기

모듈이란 별도의 파일로 분리된 독립 기능의 모음(분리된 파일)이다.
모듈을 만들어 놓으면 다른 파일에서 모듈으 불러와 사용할 수 있다.
노드는 CommonJs의 표준 스펙을 따라 모듈을 사용할 수 있게 하는데 이 과정에서 exports 전역 객체를 사용한다.
모듈로 분리한 후 별도의 자바스크립트 파일이 만들어지므로 하나의 기능을 모듈로 정의해 두면 필요에 따라 원하는 모듈만 불러들여 사용할 수 있다.

* 모듈을 만드는 법
- 별도의 자바스크립트 파일을 만든 후 그 코드에서 exports 객체를 사용한다.
- exports 객체의 속성으로 변수나 함수를지정하면 그속성을 main.js와 같은 메인 자바스크립트에서 불러와 사용할 수 있다.
- 모듈을 불러올 때는 require() 메소드를 사용하며 모듈로 만들어 둔 파일의 이름을 이 메소드의 파라미터로 전달한다.
- require() 메소드를 호출하면 모듈 객체가 반환되는데 모듈에서 exports 객체에서 설정한 속성들은 이 모듈 객체를 통해 접근할 수 있다.

exports에는 속성을 추가할 수 있어 여러 개의 변수나 함수를 각각의 속성으로 추가할 수 있다.
반면 module.exports는 하나의 변수나 함수 또는 객체를 직접 할당한다.  

외장모듈이란 다른 사람이 만들어 둔 모듈
시스템 환경 변수에 접근할 수 있는 모듈의 이름은 nconf이며 이 모듈은 설정과 관련된 유용한 기능 뿐만 아니라 시스템 환경 변수를 접근하는 기능도 포함하고 있다.
npm 패키지를 이용하면 다른 사람이 만들어 올려놓은 패키지를 다운로드하여 설치할 수 있다.
npm이란 Node Package Manager의 약자로 노드의 패키지를 사용할 수 있도록 설치 및 삭제 등을 지원하는 프로그램이다.

02-5 간단한 내장 모듈 사용하기

내장 모듈이란 노드를 설치하고 나서 그 안에 제공되는 다양한 모듈을 말한다(미리 포함되어 있는 모듈)
반면 외장 모듈은 개발자가 직접 만들어 올린 모듈이다. (npm을 설치해야 함)
내장 모듈에는 os 모듈과 path 모듈이 있다.

* os 모듈의 주요 메소드
- hostname() : 운영체제의 호스트 이름을 알려준다.
- totalmem() : 시스템의 전체 메모리 용량을 알려준다.
- freemem() : 시스템에서 사용 가능한 메모리 용량을 알려준다.
- cpus() : CPU 정보를 알려준다.
- networkInterfaces() : 네트워크 인터페이스 정보를 담은 배열 객체를 반환한다

* path 모듈의 주요 메소드
- join() : 여러 개의 이름을 모두 합쳐 하나의 파일 패스로 만들어 준다, 파일 패스를 완성할 때 구분자 등을 알아서 조정한다.
- dirname() : 파일 패스에서 디렉터리 이름을 반환한다.
- basename() : 파일 패스에서 파일의 확장자를 제외한 이름을 반환한다.
- extname() : 파일 패스에서 파일의 확장자를 반환한다.  
 
